.
├── main.tf         # Top-level main.tf file
├── modules
│   ├── ec2
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   ├── iamuser
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   ├── rds
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   ├── s3
│   │   ├── main.tf
│   │   ├── outputs.tf
│   │   └── variables.tf
│   └── vpc
│       ├── main.tf
│       ├── outputs.tf
│       └── variables.tf














ec2-module/
├── main.tf
├── outputs.tf
└── variables.tf

ROOT MODULE:

module "ec2" {
  source = "./ec2-module"  # Adjust the path as necessary
}

output "instance_id" {
  value = module.ec2.instance_id
}


main.tf:

provider "aws" {
  region = "us-east-1"  # Change to your desired region
}

resource "aws_instance" "this" {
  ami           = var.ami_id
  instance_type = var.instance_type

  tags = {
    Name = var.instance_name
  }

  # Optionally, you can add a security group here
  # security_groups = [aws_security_group.instance_sg.name]

  # If you want to use a key pair for SSH access, uncomment the line below
  # key_name = var.key_name
}

# Uncomment and configure the following resource if you need a security group
# resource "aws_security_group" "instance_sg" {
#   name        = "${var.instance_name}-sg"
#   description = "Security group for EC2 instance"
#
#   ingress {
#     from_port   = 22
#     to_port     = 22
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]  # Change as needed
#   }
#
#   egress {
#     from_port   = 0
#     to_port     = 0
#     protocol    = "-1"  # Allow all traffic
#     cidr_blocks = ["0.0.0.0/0"]
#   }
# }

variables.tf:

variable "ami_id" {
  description = "The AMI ID to use for the instance"
  type        = string
  default     = "ami-0ebfd941bbafe70c6"  # replace ami as per region
}

variable "instance_type" {
  description = "The type of instance to create"
  type        = string
  default     = "t2.micro"
}

variable "instance_name" {
  description = "The name of the EC2 instance"
  type        = string
  default     = "my-ec2-instance"
}

variable "key_name" {
  description = "The name of the SSH key pair to use for the instance"
  type        = string
  default     = ""  # Leave empty if no key pair is needed
}


outputs.tf:

output "instance_id" {
  description = "The ID of the EC2 instance"
  value       = aws_instance.this.id
}

output "public_ip" {
  description = "The public IP address of the EC2 instance"
  value       = aws_instance.this.public_ip
}

output "private_ip" {
  description = "The private IP address of the EC2 instance"
  value       = aws_instance.this.private_ip
}










iamuser-module/
├── main.tf
├── outputs.tf
└── variables.tf

ROOT MODULES:

module "iamuser" {
  source = "./iamuser-module"  # Adjust the path as necessary

  user_name         = "example-user"
  create_access_key = false  # Change to false if no access key is needed
}

output "user_id" {
  value = module.iamuser.user_id
}


main.tf:

provider "aws" {
  region = "us-east-1"  # Change to your desired region
}

resource "aws_iam_user" "this" {
  name = var.user_name

  tags = {
    Name = var.user_name
  }
}

resource "aws_iam_access_key" "this" {
  user = aws_iam_user.this.name

  # Optionally create an access key only if desired
  count = var.create_access_key ? 1 : 0
}

resource "aws_iam_user_policy" "this" {
  name   = "${var.user_name}-policy"
  user   = aws_iam_user.this.name
  policy = var.user_policy
}


variables.tf:

variable "user_name" {
  description = "The name of the IAM user"
  type        = string
  default     = "my-iam-user"
}

variable "create_access_key" {
  description = "Whether to create an access key for the user"
  type        = bool
  default     = false
}

variable "user_policy" {
  description = "The policy document to attach to the IAM user"
  type        = string
  default     = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "s3:*",
      "Effect": "Allow",
      "Resource": "*"
    }
  ]
}
EOF
}


outputs.tf:


output "user_id" {
  description = "The ID of the IAM user"
  value       = aws_iam_user.this.id
}

output "user_arn" {
  description = "The ARN of the IAM user"
  value       = aws_iam_user.this.arn
}

output "access_key_id" {
  description = "The access key ID for the IAM user"
  value   = var.create_access_key
}

output "secret_access_key" {
  description = "The secret access key for the IAM user"
  value       = length(aws_iam_access_key.this) > 0 ? aws_iam_access_key.this[0].secret : null
}










rds-module/
├── main.tf
├── outputs.tf
├── variables.tf

ROOT MODULE:

module "rds" {
  source = "./rds-module"  # Adjust the path to where your module is stored
}
 output "db_instance-id" {
 value =module.rds.db_instance_id
}

imain.tf:

provider "aws" {
  region = "us-east-1"  # Change to your desired AWS region
}

resource "aws_db_instance" "this" {
  allocated_storage    = var.allocated_storage
  engine               = var.engine
  engine_version       = var.engine_version
  instance_class       = var.instance_class
  db_name              = var.db_name
  username             = var.username
  password             = var.password
  parameter_group_name = var.parameter_group_name
  skip_final_snapshot  = var.skip_final_snapshot
  publicly_accessible  = var.publicly_accessible
  multi_az             = var.multi_az

  db_subnet_group_name    = var.db_subnet_group_name
  vpc_security_group_ids  = var.vpc_security_group_ids

  tags = {
    Name = var.db_name
  }
}


variables.tf:

variable "allocated_storage" {
  description = "The allocated storage in gigabytes for the RDS instance"
  type        = number
  default     = 20  # Default is 20 GB
}

variable "engine" {
  description = "The database engine to use"
  type        = string
  default     = "mysql"  # Can be changed to postgres, mariadb, etc.
}

variable "engine_version" {
  description = "The version of the database engine"
  type        = string
  default     = "8.0.37"  # Change according to your engine version
}

variable "instance_class" {
  description = "The instance type for the RDS instance"
  type        = string
  default     = "db.t3.micro"  # Default to t3.micro instance
}

variable "db_name" {
  description = "The name of the database"
  type        = string
  default     = "mydatabase"
}

variable "username" {
  description = "The username for the database"
  type        = string
  default     = "admin"
}

variable "password" {
  description = "The password for the master database user"
  type        = string
  sensitive   = true
  default     = "securepassword123"  # Change this in production
}

variable "parameter_group_name" {
  description = "The DB parameter group name to associate"
  type        = string
  default     = "default.mysql8.0"  # Update according to your engine
}

variable "skip_final_snapshot" {
  description = "Whether to skip taking a final snapshot before deletion"
  type        = bool
  default     = true
}

variable "publicly_accessible" {
  description = "Whether the RDS instance should be publicly accessible"
  type        = bool
  default     = false
}

variable "multi_az" {
  description = "Specifies if the RDS instance should be deployed in multiple availability zones"
  type        = bool
  default     = false
}

variable "db_subnet_group_name" {
  description = "The name of the DB subnet group to use"
  type        = string
  default     = ""
}

variable "vpc_security_group_ids" {
  description = "A list of VPC security groups to associate with the instance"
  type        = list(string)
  default     = []
}


outputs.tf:

output "db_instance_id" {
  description = "The ID of the RDS instance"
  value       = aws_db_instance.this.id
}

output "db_instance_endpoint" {
  description = "The endpoint address of the RDS instance"
  value       = aws_db_instance.this.endpoint
}

output "db_instance_arn" {
  description = "The ARN of the RDS instance"
  value       = aws_db_instance.this.arn
}










s3-module/
├── main.tf
├── outputs.tf
└── variables.tf

ROOT MODULE:

module "s3" {
  source = "./s3-module"  # Adjust the path as necessary
}

output "bucket_id" {
  value = module.s3.bucket_id
}


main.tf:

provider "aws" {
  region = "us-east-1"  # Change to your desired region
}

resource "aws_s3_bucket" "this" {
  bucket = var.bucket_name
  acl    = var.acl

  tags = {
    Name = var.bucket_name
  }
}

resource "aws_s3_bucket_versioning" "this" {
  bucket = aws_s3_bucket.this.id

  versioning_configuration {
    status = var.versioning_enabled ? "Enabled" : "Suspended"
  }
}

resource "aws_s3_bucket_lifecycle_configuration" "this" {
  bucket = aws_s3_bucket.this.id

  rule {
    id      = var.lifecycle_rule_id
    status  = "Enabled"

    expiration {
      days = var.expiration_days
    }
  }
}


variables.tf:

variable "bucket_name" {
  description = "The name of the S3 bucket"
  type        = string
  default     = "assignment-s3-a325"  # Ensure this is unique globally
}

variable "acl" {
  description = "The canned ACL to apply to the bucket"
  type        = string
  default     = "private"
}

variable "versioning_enabled" {
  description = "Enable versioning on the bucket"
  type        = bool
  default     = false
}

variable "lifecycle_rule_id" {
  description = "The ID for the lifecycle rule"
  type        = string
  default     = "example-rule"
}

variable "expiration_days" {
  description = "The number of days after which the objects will expire"
  type        = number
  default     = 30
}


outputs.tf:

output "bucket_id" {
  description = "The ID of the S3 bucket"
  value       = aws_s3_bucket.this.id
}

output "bucket_arn" {
  description = "The ARN of the S3 bucket"
  value       = aws_s3_bucket.this.arn
}

output "bucket_domain_name" {
  description = "The domain name of the S3 bucket"
  value       = aws_s3_bucket.this.bucket_domain_name
}












vpc-module/
├── main.tf
├── outputs.tf
└── variables.tf

ROOT MODULE:

module "vpc" {
  source = "./vpc-module"  # Adjust the path as necessary
}

output "vpc_id" {
  value = module.vpc.vpc_id
}


main.tf:

provider "aws" {
  region = "us-east-1"  # Change to your desired region
}

resource "aws_vpc" "this" {
  cidr_block = var.cidr_block
  enable_dns_support = var.enable_dns_support
  enable_dns_hostnames = var.enable_dns_hostnames
  tags = {
    Name = var.vpc_name
  }
}

resource "aws_internet_gateway" "this" {
  vpc_id = aws_vpc.this.id

  tags = {
    Name = "${var.vpc_name}-igw"
  }
}

resource "aws_route_table" "this" {
  vpc_id = aws_vpc.this.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.this.id
  }

  tags = {
    Name = "${var.vpc_name}-route-table"
  }
}

resource "aws_route_table_association" "this" {
  subnet_id      = aws_subnet.this.id
  route_table_id = aws_route_table.this.id
}

resource "aws_subnet" "this" {
  vpc_id                  = aws_vpc.this.id
  cidr_block              = var.subnet_cidr
  availability_zone       = var.availability_zone
  map_public_ip_on_launch = var.map_public_ip

  tags = {
    Name = "${var.vpc_name}-subnet"
  }
}


variables.tf:

variable "vpc_name" {
  description = "The name of the VPC"
  type        = string
  default     = "my-vpc"
}

variable "cidr_block" {
  description = "The CIDR block for the VPC"
  type        = string
  default     = "10.0.0.0/16"
}

variable "subnet_cidr" {
  description = "The CIDR block for the subnet"
  type        = string
  default     = "10.0.1.0/24"
}

variable "availability_zone" {
  description = "The availability zone for the subnet"
  type        = string
  default     = "us-east-1a"  # Change if needed
}

variable "enable_dns_support" {
  description = "Enable DNS support in the VPC"
  type        = bool
  default     = true
}

variable "enable_dns_hostnames" {
  description = "Enable DNS hostnames in the VPC"
  type        = bool
  default     = true
}

variable "map_public_ip" {
  description = "Map public IP addresses on subnet"
  type        = bool
  default     = true
}


outputs.tf:


output "vpc_id" {
  description = "The ID of the VPC"
  value       = aws_vpc.this.id
}

output "subnet_id" {
  description = "The ID of the subnet"
  value       = aws_subnet.this.id
}

output "internet_gateway_id" {
  description = "The ID of the internet gateway"
  value       = aws_internet_gateway.this.id
}

output "route_table_id" {
  description = "The ID of the route table"
  value       = aws_route_table.this.id
}


